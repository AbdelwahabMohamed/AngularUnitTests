notes:
-----
-use angular.mock.module to configure mocked modules
-use angular.mock.inject to load mocked modules, services, etc.... this will bootstrab the application allowing us 
to get instances of any thing in the modules that has been configured by the application by name
-it will load in sequence Angular -> ngMock -> all configured modules
- _[something]_ naming convention if we passed the function name x or _x_ , the inject will try to load something called x from the
pre-configured module.
-When using $http within a test, ngMock replaces the $httpBackendProvider with a mocked one, so no real http calles are made
that means we have to configure the mocked backend provider ourselves.

-jasmine afterEach -> verifyNoOutstandingExpectation() to make sure that all the http calls in the tests have a 
configured expectations and responses.

-jasmine afterEach -> verifyNoOutstandingRequest() to make sure that all the http calls were flushed successfully.


-ngMock cotroller service $controller(constructor, locals, [bindings])
    -constructor can be a string to get an instance by name, or an inline function, which will help us brain storm the unit tests first  then actually create them.
    -locals: local variables required by the controller
    -bindings: object allows us to  set "this" values when using the controllerAs approach
-when mocking the controller, any ANGULARSERVICES required by the controller will be resolved automatically, we don`t have to pass it explicitly
    so  _$controller_('SearchController', {$scope: $scope, $location: $location });
    and _$controller_('SearchController', {$scope: $scope}); are the same
-controllerAs approach, review john papa`s answer on stackoverflow: http://stackoverflow.com/questions/16619740/angular-should-i-use-this-or-scope/19940503#19940503
-Angular has anevent cycle for resolving promises, $rootScope.$apply() will start the chain to resolve promises, in browser, angular takes care of this implicitly.
