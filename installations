-install npm globally and locally. https://nodejs.org/en/blog/npm/npm-1-0-global-vs-local-installation/
-init npm to create package.json file. https://docs.npmjs.com/cli/init
-install bower globally and locally. https://www.npmjs.com/package/bower
-initialize bower to create the bower.config. https://bower.io/docs/creating-packages/
-install Jasmine: https://www.npmjs.com/package/jasmine
-if you want the HTML spec runner, download it from the standalone veriosn website and unzipp the content to a local directory
for example create a lib->jasmine-content and add the unzipped content to it [boot.js, console.js, jasmine-favicon.png,etc...]
-install karma with the command line runner, jasmine plugin and chrome launcher
: https://karma-runner.github.io/latest/intro/installation.html

-init karma to set up stuff like watching files, used frameworks, file paths, etc... http://karma-runner.github.io/1.0/intro/configuration.html
-add the karma start command to the test section in packages.json: "test": "karam start karma.conf.js" //I tried with the relative path and 
it didn`t work
-install -using bower- angular and angular mocks if they not already installed, include them in the specRunner.html file and later maybe use a build tool
like Gulp wiredep to inject the script references automatically
using: bower install --save angular angular-mocks
and don`t bother putting the references in the karma config file, this comes in the next step.
-install karma-bower to load bower components into unit tests without the need for adding the file references
use: https://www.npmjs.com/package/karma-bower

notes:
-----
-use angular.mock.module to configure mocked modules
-use angular.mock.inject to load mocked modules, services, etc.... this will bootstrab the application allowing us 
to get instances of any thing in the modules that has been configured by the application by name
-it will load in sequence Angular -> ngMock -> all configured modules
- _[something]_ naming convention if we passed the function name x or _x_ , the inject will try to load something called x from the
pre-configured module.
-When using $http within a test, ngMock replaces the $httpBackendProvider with a mocked one, so no real http calles are made
that means we have to configure the mocked backend provider ourselves.